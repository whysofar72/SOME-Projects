#include <Arduino.h>
#include <SPI.h>
#include <Phpoc.h>
#include "IoTMakers.h"
#include "Shield_Wrapper.h"
Shield_Wrapper g_shield;
#define SDCARD_CS 4
void sdcard_deselect()
{
  pinMode(SDCARD_CS, OUTPUT);
  digitalWrite(SDCARD_CS, HIGH); //Deselect the SD card
}
void init_shield()
{
  sdcard_deselect();
  g_shield.begin();
  g_shield.print();
}

IoTMakers g_im;
const char deviceID[]   = "yong41D1494322563736";
const char authnRqtNo[] = "uwgfd05ex";
const char extrSysID[]  = "OPEN_TCP_001PTL001_1000003663";
void init_iotmakers()
{
  Client* client = g_shield.getClient();
  if ( client == NULL ) {
    Serial.println(F("No client from shield."));
    while (1);
  }
  g_im.init(deviceID, authnRqtNo, extrSysID, *client);
  g_im.set_numdata_handler(mycb_numdata_handler);
  g_im.set_strdata_handler(mycb_strdata_handler);
  g_im.set_dataresp_handler(mycb_resp_handler);
  Serial.println(F("connect()..."));
  while ( g_im.connect() < 0 ) {
    Serial.println(F("retrying."));
    delay(3000);
  }
  Serial.println(F("auth."));
  while ( g_im.auth_device() < 0 ) {
    Serial.println(F("fail"));
    while (1);
  }
  Serial.print(F("FreeRAM=")); Serial.println(g_im.getFreeRAM());
}
#define PIN_LED  9
#define PIR  3
#define SWITCH 12 
void setup()
{
  Serial.begin(115200);
  Serial1.begin(9600);
  while ( !Serial )  {
    ;
  }
  pinMode(PIN_LED, OUTPUT);
  pinMode(SWITCH, INPUT_PULLUP);
  pinMode(PIR, INPUT_PULLUP);
  digitalWrite(PIN_LED, HIGH);
  init_shield();
  init_iotmakers();
  digitalWrite(PIN_LED, LOW);
}
int data;
int emergency = 0;
int danger = 0;
int get_sw = 0;
static unsigned long tick1 = millis();
void loop()
{
  get_data_bt();
  Serial.println(get_sw);
  delay(50);
  if (get_sw == 1)
  {
    emergency = digitalRead(SWITCH);
    send_data_emg();
    data = digitalRead(PIR);
    if (data == 0)
    {
      tick1 = millis();
    }
    if ( ( millis() - tick1) > 10000)
    {
      danger = 1;
      send_data_bt();
      send_data();
      tick1 = millis();
    }
  }
  else if (get_sw == 0)
  {
    tick1 = millis();
    danger = 0;
    send_data_bt();
    send_data();
    get_data_bt();
  }

  g_im.loop();
}

int get_data_bt()
{
  if (Serial1.available()) {
    get_sw = Serial1.read();
  }
}
int send_data_bt()
{
  Serial1.write(danger);
}
int send_data()
{
  Serial.println(danger);
  if ( g_im.send_numdata("PIR", (double)danger) < 0 ) {
    Serial.println(F("fail"));
    return -1;
  }
  return 0;
}

int send_data_emg()
{
  Serial.println(emergency);
  if ( g_im.send_numdata("emg", (double)emergency) < 0 ) {
    Serial.println(F("fail"));
    return -1;
  }
  return 0;
}


void mycb_numdata_handler(char *tagid, double numval)
{
  // !!! USER CODE HERE
  //Serial.print(tagid);Serial.print(F("="));Serial.println(numval);
}
void mycb_strdata_handler(char *tagid, char *strval)
{
  // !!! USER CODE HERE
  Serial.print(tagid); Serial.print(F("=")); Serial.println(strval);
  if ( strcmp(tagid, "led") == 0 && strcmp(strval, "on") == 0 )
    digitalWrite(PIN_LED, HIGH);
  else if ( strcmp(tagid, "led") == 0 && strcmp(strval, "off") == 0 )
    digitalWrite(PIN_LED, LOW);
}
void mycb_resp_handler(long long trxid, char *respCode)
{
  if ( strcmp(respCode, "100") == 0 )
    Serial.println("resp:OK");
  else
    Serial.println("resp:Not OK");
}