/*
  #wake up reader
  send: 55 55 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 03 fd d4 14 01 17 00      //send data to wake NFC Module up
  return: 00 00 FF 00 FF 00 00 00 FF 02 FE D5 15 16 00     //receive data from NFC Module & send it to print it out on Serial Monitor

  #get firmware
  send: 00 00 FF 02 FE D4 02 2A 00       //D4 02 as input
  return: 00 00 FF 00 FF 00 00 00 FF 06 FA D5 03 32 01 06 07 E8 00       //D5 03 32 01 06 07 as output

  #read the tag
  send: 00 00 FF 04 FC D4 4A 01 00 E1 00
  return: 00 00 FF 00 FF 00 00 00 FF 0C F4 D5 4B 01 01 00 04 08 04 XX XX XX XX 5A 00 is tag.     //XX XX XX XX as UID of the tag

*/

const unsigned char wake[24] = {
  0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xfd, 0xd4, 0x14, 0x01, 0x17, 0x00
};//wake up NFC module
const unsigned char firmware[9] = {
  0x00, 0x00, 0xFF, 0x02, 0xFE, 0xD4, 0x02, 0x2A, 0x00
};//
const unsigned char tag[11] = {
  0x00, 0x00, 0xFF, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, 0x00
};//detecting tag command
const unsigned char std_ACK[25] = {
  0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x0C,
  0xF4, 0xD5, 0x4B, 0x01, 0x01, 0x00, 0x04, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x00
};

unsigned char old_id[5];
unsigned char cur_id[5];
int count;

unsigned char receive_ACK[25];//Command receiving buffer

#if defined(ARDUINO) && ARDUINO >= 100
#include "Arduino.h"
#define print1Byte(args) Serial2.write(args)
#define print1lnByte(args)  Serial2.write(args),Serial2.println()
#else
#include "WProgram.h"
#define print1Byte(args) Serial2.print(args,BYTE)
#define print1lnByte(args)  Serial2.println(args,BYTE)
#endif

#include <Servo.h>
#define sw1 11

Servo sv;
int pos1 = 0; 
int pos2 = 165; 
int get_sw = 0;
int nfcON = 0;
int cnt = 0;

void setup() {
  pinMode(sw1, INPUT_PULLUP);
  sv.attach(3);
  Serial.begin(9600);  // open serial with PC
  Serial2.begin(115200);  //open serial1 (NFC Module) with device
  Serial3.begin(9600);  //open serial2 (Bluetooth) with device
  wake_card();
  delay(100);
  read_ACK(15);
  delay(100);
  display(15);
  sv.write(pos2);
}

void loop() {
  send_tag();
  read_ACK(25);
  delay(100);
  receiveBT();

  if (nfcON == 1) {  //NFC Module Activate
    if (test_ACK ()) {
      read_id();
      count = check_id(count);
      if (count == 0) {
        display(25);
        sv.write(pos2);  // door unlock
        delay(2500);
        get_sw = 0;
        nfcON = 0;
        sendBT();
      }
    }
  }
  else if (nfcON == 0) {  // NFC not working, switch ON
    if (digitalRead(sw1) == LOW) {
      cnt++;
      if (cnt == 1) {
        get_sw = 1;
        nfcON = 0;
        sendBT();
        sv.write(pos1);  // DOOR LOCK
      }
      else if (cnt == 2) {
        get_sw = 0;  // get_sw initialize
        sendBT();
        sv.write(pos2);  // DOOR UNLOCK
        cnt = 0;  //cnt initialize
      }
    }
  }
  copy_id ();
}

void receiveBT(void) {   //Receive Bluetooth data from Main Board 
  if (Serial3.available()) {
    nfcON = Serial3.read();
  }
  Serial.println(nfcON);
  delay(50);
}

void sendBT(void) {
  Serial3.write(get_sw);
}

int test_ACK (void) {   // Return true if receive_ACK accord with std_ACK
  int i;
  for (i = 0; i < 19; i++) {
    if (receive_ACK[i] != std_ACK[i])
      return 0;
  }
  return 1;
}

void read_id (void) {
  int ai, ci;
  for (ci = 0, ai = 19; ci < 5; ci++, ai++) {
    cur_id[ci] = receive_ACK[ai];
  }
}

int check_id(int count) {   //check tag UID if they match with registered UID
  if (cur_id[0] == 52 && cur_id[1] == 38 && cur_id[2] == 147) {
    return 0;
  }
  return 1;
}

void send_id (void) {   //send id to PC
  int i;
  Serial.print ("ID: ");
  for (i = 19; i <= 23; i++) {
    Serial.print (receive_ACK[i], HEX);
    Serial.print (" ");
  }
  Serial.println ();
}

void UART1_Send_Byte(unsigned char command_data) { //send byte to device
  print1Byte(command_data);
#if defined(ARDUINO) && ARDUINO >= 100
  Serial2.flush();// complete the transmission of outgoing serial data
#endif
}

void UART_Send_Byte(unsigned char command_data) { //send byte to PC
  Serial.print(command_data, HEX);
  Serial.print(" ");
}

void read_ACK(unsigned char temp) { //read ACK into reveive_ACK[]
  unsigned char i;
  for (i = 0; i < temp; i++) {
    receive_ACK[i] = Serial2.read();
  }
}

void wake_card(void) { //send wake[] to device
  unsigned char i;
  for (i = 0; i < 24; i++) //send command
    UART1_Send_Byte(wake[i]);
}

void firmware_version(void) { //send fireware[] to device
  unsigned char i;
  for (i = 0; i < 9; i++) //send command
    UART1_Send_Byte(firmware[i]);
}

void send_tag(void) { //send tag[] to device
  unsigned char i;
  for (i = 0; i < 11; i++) //send command
    UART1_Send_Byte(tag[i]);
}

void display(unsigned char tem) { //send receive_ACK[] to PC
  unsigned char i;
  for (i = 0; i < tem; i++) //send command
    UART_Send_Byte(receive_ACK[i]);
  Serial.println();
}